
TransceiverV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000db6  00000e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  00000e5a  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00001c98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c58  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e1  00000000  00000000  00003a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7f  00000000  00000000  00004231  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00004eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d1  00000000  00000000  0000533c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011d9  00000000  00000000  00005c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00006de6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	f7 03       	fmuls	r23, r23

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e6 eb       	ldi	r30, 0xB6	; 182
  7e:	fd e0       	ldi	r31, 0x0D	; 13
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a0 31       	cpi	r26, 0x10	; 16
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	11 e0       	ldi	r17, 0x01	; 1
  8e:	a0 e1       	ldi	r26, 0x10	; 16
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a8 31       	cpi	r26, 0x18	; 24
  98:	b1 07       	cpc	r27, r17
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__tablejump__>
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 d6 02 	call	0x5ac	; 0x5ac <main>
  b6:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_ZN8SPIClass5beginEv>:
  // MISO pin automatically overrides to INPUT.
  // When the SS pin is set as OUTPUT, it can be used as
  // a general purpose output port (it doesn't influence
  // SPI operations).

	DDRB |= _BV(SCK) | _BV(MOSI) | _BV(SS);
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	8c 62       	ori	r24, 0x2C	; 44
  c2:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~_BV(MISO);
  c4:	24 98       	cbi	0x04, 4	; 4
	
	DDRD |= _BV(LED);
  c6:	52 9a       	sbi	0x0a, 2	; 10

	PORTB |= _BV(SS);
  c8:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~_BV(MOSI) & ~_BV(SCK);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	87 7d       	andi	r24, 0xD7	; 215
  ce:	85 b9       	out	0x05, r24	; 5

	
  // Warning: if the SS pin ever becomes a LOW INPUT then SPI 
  // automatically switches to Slave, so the data direction of 
  // the SS pin MUST be kept as OUTPUT.
  SPCR |= _BV(MSTR);
  d0:	8c b5       	in	r24, 0x2c	; 44
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	8c bd       	out	0x2c, r24	; 44
  SPCR |= _BV(SPE);
  d6:	8c b5       	in	r24, 0x2c	; 44
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	8c bd       	out	0x2c, r24	; 44
}
  dc:	08 95       	ret

000000de <_ZN8SPIClass3endEv>:

void SPIClass::end() {
  SPCR &= ~_BV(SPE);
  de:	8c b5       	in	r24, 0x2c	; 44
  e0:	8f 7b       	andi	r24, 0xBF	; 191
  e2:	8c bd       	out	0x2c, r24	; 44
}
  e4:	08 95       	ret

000000e6 <_ZN8SPIClass11setDataModeEh>:
  }
}*/

void SPIClass::setDataMode(uint8_t mode)
{
  SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
  e6:	9c b5       	in	r25, 0x2c	; 44
  e8:	93 7f       	andi	r25, 0xF3	; 243
  ea:	89 2b       	or	r24, r25
  ec:	8c bd       	out	0x2c, r24	; 44
}
  ee:	08 95       	ret

000000f0 <_ZN8SPIClass15setClockDividerEh>:

void SPIClass::setClockDivider(uint8_t rate)
{
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  f0:	9c b5       	in	r25, 0x2c	; 44
  f2:	28 2f       	mov	r18, r24
  f4:	23 70       	andi	r18, 0x03	; 3
  f6:	9c 7f       	andi	r25, 0xFC	; 252
  f8:	92 2b       	or	r25, r18
  fa:	9c bd       	out	0x2c, r25	; 44
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
  fc:	2d b5       	in	r18, 0x2d	; 45
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	95 95       	asr	r25
 102:	87 95       	ror	r24
 104:	95 95       	asr	r25
 106:	87 95       	ror	r24
 108:	81 70       	andi	r24, 0x01	; 1
 10a:	92 2f       	mov	r25, r18
 10c:	9e 7f       	andi	r25, 0xFE	; 254
 10e:	89 2b       	or	r24, r25
 110:	8d bd       	out	0x2d, r24	; 45
}
 112:	08 95       	ret

00000114 <_ZN6Nrf24lC1Ev>:
#include "Mirf.h"
#include "SPI.h"
#include "SPI.cpp"
// Defines for setting the MiRF registers for transmitting or receiving mode

Nrf24l::Nrf24l(){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	0f 92       	push	r0
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	fc 01       	movw	r30, r24
	channel = 1;
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	83 83       	std	Z+3, r24	; 0x03
	payload = 3;
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	84 83       	std	Z+4, r24	; 0x04
	SPIClass spi_object = SPIClass();
	spi = &spi_object;
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	96 83       	std	Z+6, r25	; 0x06
 12e:	85 83       	std	Z+5, r24	; 0x05
}
 130:	0f 90       	pop	r0
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <_ZN6Nrf24l12transferSyncEPhS0_h>:

void Nrf24l::transferSync(uint8_t *dataout,uint8_t *datain,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
 138:	22 23       	and	r18, r18
 13a:	79 f0       	breq	.+30     	; 0x15a <_ZN6Nrf24l12transferSyncEPhS0_h+0x22>
 13c:	a6 2f       	mov	r26, r22
 13e:	b7 2f       	mov	r27, r23
 140:	e4 2f       	mov	r30, r20
 142:	f5 2f       	mov	r31, r21
 144:	80 e0       	ldi	r24, 0x00	; 0
		datain[i] = spi->transfer(dataout[i]);
 146:	9d 91       	ld	r25, X+

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 148:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & _BV(SPIF)))
 14a:	0d b4       	in	r0, 0x2d	; 45
 14c:	07 fe       	sbrs	r0, 7
 14e:	fd cf       	rjmp	.-6      	; 0x14a <_ZN6Nrf24l12transferSyncEPhS0_h+0x12>
	;
	return SPDR;
 150:	9e b5       	in	r25, 0x2e	; 46
 152:	91 93       	st	Z+, r25
	spi = &spi_object;
}

void Nrf24l::transferSync(uint8_t *dataout,uint8_t *datain,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	82 17       	cp	r24, r18
 158:	b1 f7       	brne	.-20     	; 0x146 <_ZN6Nrf24l12transferSyncEPhS0_h+0xe>
 15a:	08 95       	ret

0000015c <_ZN6Nrf24l12transmitSyncEPhh>:
	}
}

void Nrf24l::transmitSync(uint8_t *dataout,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
 15c:	44 23       	and	r20, r20
 15e:	61 f0       	breq	.+24     	; 0x178 <_ZN6Nrf24l12transmitSyncEPhh+0x1c>
 160:	e6 2f       	mov	r30, r22
 162:	f7 2f       	mov	r31, r23
 164:	80 e0       	ldi	r24, 0x00	; 0
		spi->transfer(dataout[i]);
 166:	91 91       	ld	r25, Z+
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
}

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 168:	9e bd       	out	0x2e, r25	; 46
	while (!(SPSR & _BV(SPIF)))
 16a:	0d b4       	in	r0, 0x2d	; 45
 16c:	07 fe       	sbrs	r0, 7
 16e:	fd cf       	rjmp	.-6      	; 0x16a <_ZN6Nrf24l12transmitSyncEPhh+0xe>
	;
	return SPDR;
 170:	9e b5       	in	r25, 0x2e	; 46
	}
}

void Nrf24l::transmitSync(uint8_t *dataout,uint8_t len){
	uint8_t i;
	for(i = 0;i < len;i++){
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	84 17       	cp	r24, r20
 176:	b9 f7       	brne	.-18     	; 0x166 <_ZN6Nrf24l12transmitSyncEPhh+0xa>
 178:	08 95       	ret

0000017a <_ZN6Nrf24l4ceHiEv>:
	PTX = 1;
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (0<<PRIM_RX) ) );
}

void Nrf24l::ceHi(){
	PORTB |= _BV(CE);
 17a:	29 9a       	sbi	0x05, 1	; 5
}
 17c:	08 95       	ret

0000017e <_ZN6Nrf24l5ceLowEv>:

void Nrf24l::ceLow(){
	PORTB &= ~_BV(CE);
 17e:	29 98       	cbi	0x05, 1	; 5
}
 180:	08 95       	ret

00000182 <_ZN6Nrf24l5csnHiEv>:

void Nrf24l::csnHi(){
	PORTB |= _BV(SS);
 182:	2a 9a       	sbi	0x05, 2	; 5
}
 184:	08 95       	ret

00000186 <_ZN6Nrf24l4initEv>:


void Nrf24l::init() 
// Initializes pins to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{   
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
    
	DDRB |= _BV(SS) | _BV(CE);
 18c:	84 b1       	in	r24, 0x04	; 4
 18e:	86 60       	ori	r24, 0x06	; 6
 190:	84 b9       	out	0x04, r24	; 4

    ceLow();
 192:	ce 01       	movw	r24, r28
 194:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN6Nrf24l5ceLowEv>
    csnHi();
 198:	ce 01       	movw	r24, r28
 19a:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN6Nrf24l5csnHiEv>

    // Initialize spi module
    spi->begin();
 19e:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZN8SPIClass5beginEv>

}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <_ZN6Nrf24l6csnLowEv>:
void Nrf24l::csnHi(){
	PORTB |= _BV(SS);
}

void Nrf24l::csnLow(){
	PORTB &= ~_BV(SS);
 1a8:	2a 98       	cbi	0x05, 2	; 5
}
 1aa:	08 95       	ret

000001ac <_ZN6Nrf24l7flushRxEv>:
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (1<<PRIM_RX) ) );
	ceHi();
	configRegister(STATUS,(1 << TX_DS) | (1 << MAX_RT)); 
}

void Nrf24l::flushRx(){
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
    csnLow();
 1b2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN6Nrf24l6csnLowEv>
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
}

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 1b6:	82 ee       	ldi	r24, 0xE2	; 226
 1b8:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & _BV(SPIF)))
 1ba:	0d b4       	in	r0, 0x2d	; 45
 1bc:	07 fe       	sbrs	r0, 7
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <_ZN6Nrf24l7flushRxEv+0xe>
	;
	return SPDR;
 1c0:	8e b5       	in	r24, 0x2e	; 46
    spi->transfer( FLUSH_RX );
    csnHi();
 1c2:	ce 01       	movw	r24, r28
 1c4:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN6Nrf24l5csnHiEv>
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <_ZN6Nrf24l13writeRegisterEhPhh>:
    csnHi();
}

void Nrf24l::writeRegister(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
 1da:	8c 01       	movw	r16, r24
 1dc:	c6 2f       	mov	r28, r22
 1de:	7a 01       	movw	r14, r20
 1e0:	d2 2f       	mov	r29, r18
    csnLow();
 1e2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer(W_REGISTER | (REGISTER_MASK & reg));
 1e6:	cf 71       	andi	r28, 0x1F	; 31
 1e8:	c0 62       	ori	r28, 0x20	; 32
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
}

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 1ea:	ce bd       	out	0x2e, r28	; 46
	while (!(SPSR & _BV(SPIF)))
 1ec:	0d b4       	in	r0, 0x2d	; 45
 1ee:	07 fe       	sbrs	r0, 7
 1f0:	fd cf       	rjmp	.-6      	; 0x1ec <_ZN6Nrf24l13writeRegisterEhPhh+0x1e>
	;
	return SPDR;
 1f2:	8e b5       	in	r24, 0x2e	; 46
    transmitSync(value,len);
 1f4:	c8 01       	movw	r24, r16
 1f6:	b7 01       	movw	r22, r14
 1f8:	4d 2f       	mov	r20, r29
 1fa:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN6Nrf24l12transmitSyncEPhh>
    csnHi();
 1fe:	c8 01       	movw	r24, r16
 200:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN6Nrf24l5csnHiEv>
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	08 95       	ret

00000212 <_ZN6Nrf24l8setTADDREPh>:
	ceHi();
}

void Nrf24l::setTADDR(uint8_t * adr)
// Sets the transmitting address
{
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	8b 01       	movw	r16, r22
	/*
	 * RX_ADDR_P0 must be set to the sending addr for auto ack to work.
	 */

	writeRegister(RX_ADDR_P0,adr,mirf_ADDR_LEN);
 21e:	6a e0       	ldi	r22, 0x0A	; 10
 220:	a8 01       	movw	r20, r16
 222:	25 e0       	ldi	r18, 0x05	; 5
 224:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN6Nrf24l13writeRegisterEhPhh>
	writeRegister(TX_ADDR,adr,mirf_ADDR_LEN);
 228:	ce 01       	movw	r24, r28
 22a:	60 e1       	ldi	r22, 0x10	; 16
 22c:	a8 01       	movw	r20, r16
 22e:	25 e0       	ldi	r18, 0x05	; 5
 230:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN6Nrf24l13writeRegisterEhPhh>
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	08 95       	ret

0000023e <_ZN6Nrf24l8setRADDREPh>:
    flushRx();
}

void Nrf24l::setRADDR(uint8_t * adr) 
// Sets the receiving address
{
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
 248:	8b 01       	movw	r16, r22
	ceLow();
 24a:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN6Nrf24l5ceLowEv>
	writeRegister(RX_ADDR_P1,adr,mirf_ADDR_LEN);
 24e:	ce 01       	movw	r24, r28
 250:	6b e0       	ldi	r22, 0x0B	; 11
 252:	a8 01       	movw	r20, r16
 254:	25 e0       	ldi	r18, 0x05	; 5
 256:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN6Nrf24l13writeRegisterEhPhh>
	ceHi();
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN6Nrf24l4ceHiEv>
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	0f 91       	pop	r16
 268:	08 95       	ret

0000026a <_ZN6Nrf24l12readRegisterEhPhh>:
    csnHi();
}

void Nrf24l::readRegister(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	8c 01       	movw	r16, r24
 278:	c6 2f       	mov	r28, r22
 27a:	7a 01       	movw	r14, r20
 27c:	d2 2f       	mov	r29, r18
    csnLow();
 27e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer(R_REGISTER | (REGISTER_MASK & reg));
 282:	cf 71       	andi	r28, 0x1F	; 31
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
}

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 284:	ce bd       	out	0x2e, r28	; 46
	while (!(SPSR & _BV(SPIF)))
 286:	0d b4       	in	r0, 0x2d	; 45
 288:	07 fe       	sbrs	r0, 7
 28a:	fd cf       	rjmp	.-6      	; 0x286 <_ZN6Nrf24l12readRegisterEhPhh+0x1c>
	;
	return SPDR;
 28c:	8e b5       	in	r24, 0x2e	; 46
    transferSync(value,value,len);
 28e:	c8 01       	movw	r24, r16
 290:	b7 01       	movw	r22, r14
 292:	a7 01       	movw	r20, r14
 294:	2d 2f       	mov	r18, r29
 296:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN6Nrf24l12transferSyncEPhS0_h>
    csnHi();
 29a:	c8 01       	movw	r24, r16
 29c:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN6Nrf24l5csnHiEv>
}
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	08 95       	ret

000002ae <_ZN6Nrf24l9getStatusEv>:
		return 1;
	}
	return 0;
}

uint8_t Nrf24l::getStatus(){
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	0f 92       	push	r0
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t rv;
	readRegister(STATUS,&rv,1);
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	ae 01       	movw	r20, r28
 2bc:	4f 5f       	subi	r20, 0xFF	; 255
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN6Nrf24l12readRegisterEhPhh>
	return rv;
}
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	0f 90       	pop	r0
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <_ZN6Nrf24l11rxFifoEmptyEv>:
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
    return !rxFifoEmpty();
}

uint8_t Nrf24l::rxFifoEmpty(){
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	0f 92       	push	r0
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t fifoStatus;

	readRegister(FIFO_STATUS,&fifoStatus,sizeof(fifoStatus));
 2da:	67 e1       	ldi	r22, 0x17	; 23
 2dc:	ae 01       	movw	r20, r28
 2de:	4f 5f       	subi	r20, 0xFF	; 255
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN6Nrf24l12readRegisterEhPhh>
	return (fifoStatus & (1 << RX_EMPTY));
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
}
 2ea:	81 70       	andi	r24, 0x01	; 1
 2ec:	0f 90       	pop	r0
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <_ZN6Nrf24l9dataReadyEv>:
	writeRegister(TX_ADDR,adr,mirf_ADDR_LEN);
}

uint8_t Nrf24l::dataReady() 
// Checks if data is available for reading
{
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	ec 01       	movw	r28, r24
    // See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = getStatus();
 2fa:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN6Nrf24l9getStatusEv>

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
 2fe:	86 fd       	sbrc	r24, 6
 300:	08 c0       	rjmp	.+16     	; 0x312 <_ZN6Nrf24l9dataReadyEv+0x1e>
    return !rxFifoEmpty();
 302:	ce 01       	movw	r24, r28
 304:	0e 94 68 01 	call	0x2d0	; 0x2d0 <_ZN6Nrf24l11rxFifoEmptyEv>
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	88 23       	and	r24, r24
 30c:	19 f0       	breq	.+6      	; 0x314 <_ZN6Nrf24l9dataReadyEv+0x20>
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	01 c0       	rjmp	.+2      	; 0x314 <_ZN6Nrf24l9dataReadyEv+0x20>
    // See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = getStatus();

    // We can short circuit on RX_DR, but if it's not set, we still need
    // to check the FIFO for any pending packets
    if ( status & (1 << RX_DR) ) return 1;
 312:	91 e0       	ldi	r25, 0x01	; 1
    return !rxFifoEmpty();
}
 314:	89 2f       	mov	r24, r25
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <_ZN6Nrf24l14configRegisterEhh>:
    configRegister(STATUS,(1<<RX_DR));   // Reset status register
}

void Nrf24l::configRegister(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 31c:	0f 93       	push	r16
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ec 01       	movw	r28, r24
 326:	06 2f       	mov	r16, r22
 328:	14 2f       	mov	r17, r20
    csnLow();
 32a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN6Nrf24l6csnLowEv>
    spi->transfer(W_REGISTER | (REGISTER_MASK & reg));
 32e:	0f 71       	andi	r16, 0x1F	; 31
 330:	00 62       	ori	r16, 0x20	; 32
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
}

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 332:	0e bd       	out	0x2e, r16	; 46
	while (!(SPSR & _BV(SPIF)))
 334:	0d b4       	in	r0, 0x2d	; 45
 336:	07 fe       	sbrs	r0, 7
 338:	fd cf       	rjmp	.-6      	; 0x334 <_ZN6Nrf24l14configRegisterEhh+0x18>
	;
	return SPDR;
 33a:	8e b5       	in	r24, 0x2e	; 46
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
}

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 33c:	1e bd       	out	0x2e, r17	; 46
	while (!(SPSR & _BV(SPIF)))
 33e:	0d b4       	in	r0, 0x2d	; 45
 340:	07 fe       	sbrs	r0, 7
 342:	fd cf       	rjmp	.-6      	; 0x33e <_ZN6Nrf24l14configRegisterEhh+0x22>
	;
	return SPDR;
 344:	8e b5       	in	r24, 0x2e	; 46
    spi->transfer(value);
    csnHi();
 346:	ce 01       	movw	r24, r28
 348:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN6Nrf24l5csnHiEv>
}
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <_ZN6Nrf24l9powerUpTxEv>:
    spi->transfer( FLUSH_RX );
    csnHi();
}

void Nrf24l::powerUpTx(){
	PTX = 1;
 356:	21 e0       	ldi	r18, 0x01	; 1
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (0<<PRIM_RX) ) );
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	4a e0       	ldi	r20, 0x0A	; 10
 360:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6Nrf24l14configRegisterEhh>
}
 364:	08 95       	ret

00000366 <_ZN6Nrf24l9powerUpRxEv>:
	uint8_t rv;
	readRegister(STATUS,&rv,1);
	return rv;
}

void Nrf24l::powerUpRx(){
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	ec 01       	movw	r28, r24
	PTX = 0;
 36c:	18 82       	st	Y, r1
	ceLow();
 36e:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN6Nrf24l5ceLowEv>
	configRegister(CONFIG, mirf_CONFIG | ( (1<<PWR_UP) | (1<<PRIM_RX) ) );
 372:	ce 01       	movw	r24, r28
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	4b e0       	ldi	r20, 0x0B	; 11
 378:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6Nrf24l14configRegisterEhh>
	ceHi();
 37c:	ce 01       	movw	r24, r28
 37e:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN6Nrf24l4ceHiEv>
	configRegister(STATUS,(1 << TX_DS) | (1 << MAX_RT)); 
 382:	ce 01       	movw	r24, r28
 384:	67 e0       	ldi	r22, 0x07	; 7
 386:	40 e3       	ldi	r20, 0x30	; 48
 388:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6Nrf24l14configRegisterEhh>
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <_ZN6Nrf24l9isSendingEv>:
 * Test if chip is still sending.
 * When sending has finished return chip to listening.
 *
 */

uint8_t Nrf24l::isSending(){
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ec 01       	movw	r28, r24
	uint8_t status;
	if(PTX){
 398:	88 81       	ld	r24, Y
 39a:	88 23       	and	r24, r24
 39c:	51 f0       	breq	.+20     	; 0x3b2 <_ZN6Nrf24l9isSendingEv+0x20>
		status = getStatus();
 39e:	ce 01       	movw	r24, r28
 3a0:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN6Nrf24l9getStatusEv>
	    	
		/*
		 *  if sending successful (TX_DS) or max retries exceded (MAX_RT).
		 */

		if((status & ((1 << TX_DS)  | (1 << MAX_RT)))){
 3a4:	80 73       	andi	r24, 0x30	; 48
 3a6:	39 f0       	breq	.+14     	; 0x3b6 <_ZN6Nrf24l9isSendingEv+0x24>
			powerUpRx();
 3a8:	ce 01       	movw	r24, r28
 3aa:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN6Nrf24l9powerUpRxEv>
			return 0; 
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <_ZN6Nrf24l9isSendingEv+0x26>
		}

		return 1;
	}
	return 0;
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	01 c0       	rjmp	.+2      	; 0x3b8 <_ZN6Nrf24l9isSendingEv+0x26>
		if((status & ((1 << TX_DS)  | (1 << MAX_RT)))){
			powerUpRx();
			return 0; 
		}

		return 1;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	08 95       	ret

000003be <_ZN6Nrf24l6configEv>:

void Nrf24l::config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
// NB: channel and payload must be set now.
{
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	ec 01       	movw	r28, r24
	
	configRegister(RF_SETUP,0x7);
 3c4:	66 e0       	ldi	r22, 0x06	; 6
 3c6:	47 e0       	ldi	r20, 0x07	; 7
 3c8:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6Nrf24l14configRegisterEhh>
    // Set RF channel
	configRegister(RF_CH,channel);
 3cc:	ce 01       	movw	r24, r28
 3ce:	65 e0       	ldi	r22, 0x05	; 5
 3d0:	4b 81       	ldd	r20, Y+3	; 0x03
 3d2:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6Nrf24l14configRegisterEhh>

    // Set length of incoming payload 
	configRegister(RX_PW_P0, payload);
 3d6:	ce 01       	movw	r24, r28
 3d8:	61 e1       	ldi	r22, 0x11	; 17
 3da:	4c 81       	ldd	r20, Y+4	; 0x04
 3dc:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6Nrf24l14configRegisterEhh>
	configRegister(RX_PW_P1, payload);
 3e0:	ce 01       	movw	r24, r28
 3e2:	62 e1       	ldi	r22, 0x12	; 18
 3e4:	4c 81       	ldd	r20, Y+4	; 0x04
 3e6:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6Nrf24l14configRegisterEhh>

    // Start receiver 
    powerUpRx();
 3ea:	ce 01       	movw	r24, r28
 3ec:	0e 94 b3 01 	call	0x366	; 0x366 <_ZN6Nrf24l9powerUpRxEv>
    flushRx();
 3f0:	ce 01       	movw	r24, r28
 3f2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN6Nrf24l7flushRxEv>
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <_ZN6Nrf24l4sendEPh>:


void Nrf24l::send(uint8_t * value) 
// Sends a data package to the default address. Be sure to send the correct
// amount of bytes as configured as payload on the receiver.
{
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	ec 01       	movw	r28, r24
 406:	8b 01       	movw	r16, r22
    uint8_t status;
    status = getStatus();
 408:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN6Nrf24l9getStatusEv>

    while (PTX) {
 40c:	07 c0       	rjmp	.+14     	; 0x41c <_ZN6Nrf24l4sendEPh+0x20>
	    status = getStatus();
 40e:	ce 01       	movw	r24, r28
 410:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN6Nrf24l9getStatusEv>

	    if((status & ((1 << TX_DS)  | (1 << MAX_RT)))){
 414:	80 73       	andi	r24, 0x30	; 48
 416:	11 f0       	breq	.+4      	; 0x41c <_ZN6Nrf24l4sendEPh+0x20>
		    PTX = 0;
 418:	18 82       	st	Y, r1
		    break;
 41a:	03 c0       	rjmp	.+6      	; 0x422 <_ZN6Nrf24l4sendEPh+0x26>
// amount of bytes as configured as payload on the receiver.
{
    uint8_t status;
    status = getStatus();

    while (PTX) {
 41c:	88 81       	ld	r24, Y
 41e:	88 23       	and	r24, r24
 420:	b1 f7       	brne	.-20     	; 0x40e <_ZN6Nrf24l4sendEPh+0x12>
		    PTX = 0;
		    break;
	    }
    }                  // Wait until last paket is send

    ceLow();
 422:	ce 01       	movw	r24, r28
 424:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN6Nrf24l5ceLowEv>
    
    powerUpTx();       // Set to transmitter mode , Power up
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 ab 01 	call	0x356	; 0x356 <_ZN6Nrf24l9powerUpTxEv>
    
    csnLow();                    // Pull down chip select
 42e:	ce 01       	movw	r24, r28
 430:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN6Nrf24l6csnLowEv>
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
}

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 434:	81 ee       	ldi	r24, 0xE1	; 225
 436:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & _BV(SPIF)))
 438:	0d b4       	in	r0, 0x2d	; 45
 43a:	07 fe       	sbrs	r0, 7
 43c:	fd cf       	rjmp	.-6      	; 0x438 <_ZN6Nrf24l4sendEPh+0x3c>
	;
	return SPDR;
 43e:	8e b5       	in	r24, 0x2e	; 46
    spi->transfer( FLUSH_TX );     // Write cmd to flush tx fifo
    csnHi();                    // Pull up chip select
 440:	ce 01       	movw	r24, r28
 442:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN6Nrf24l5csnHiEv>
    
    csnLow();                    // Pull down chip select
 446:	ce 01       	movw	r24, r28
 448:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN6Nrf24l6csnLowEv>
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
}

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 44c:	80 ea       	ldi	r24, 0xA0	; 160
 44e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & _BV(SPIF)))
 450:	0d b4       	in	r0, 0x2d	; 45
 452:	07 fe       	sbrs	r0, 7
 454:	fd cf       	rjmp	.-6      	; 0x450 <_ZN6Nrf24l4sendEPh+0x54>
	;
	return SPDR;
 456:	8e b5       	in	r24, 0x2e	; 46
    spi->transfer( W_TX_PAYLOAD ); // Write cmd to write payload
    transmitSync(value,payload);   // Write payload
 458:	ce 01       	movw	r24, r28
 45a:	b8 01       	movw	r22, r16
 45c:	4c 81       	ldd	r20, Y+4	; 0x04
 45e:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN6Nrf24l12transmitSyncEPhh>
    csnHi();                    // Pull up chip select
 462:	ce 01       	movw	r24, r28
 464:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN6Nrf24l5csnHiEv>

    ceHi();                     // Start transmission
 468:	ce 01       	movw	r24, r28
 46a:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN6Nrf24l4ceHiEv>
}
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	1f 91       	pop	r17
 474:	0f 91       	pop	r16
 476:	08 95       	ret

00000478 <_ZN6Nrf24l7getDataEPh>:



void Nrf24l::getData(uint8_t * data) 
// Reads payload bytes into data array
{
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	ec 01       	movw	r28, r24
 482:	8b 01       	movw	r16, r22
    csnLow();                               // Pull down chip select
 484:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_ZN6Nrf24l6csnLowEv>
  SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
  SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
}

uint8_t SPIClass::transfer(uint8_t _data) {
	SPDR = _data;
 488:	81 e6       	ldi	r24, 0x61	; 97
 48a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & _BV(SPIF)))
 48c:	0d b4       	in	r0, 0x2d	; 45
 48e:	07 fe       	sbrs	r0, 7
 490:	fd cf       	rjmp	.-6      	; 0x48c <_ZN6Nrf24l7getDataEPh+0x14>
	;
	return SPDR;
 492:	8e b5       	in	r24, 0x2e	; 46
    spi->transfer( R_RX_PAYLOAD );            // Send cmd to read rx payload
    transferSync(data,data,payload); // Read payload
 494:	ce 01       	movw	r24, r28
 496:	b8 01       	movw	r22, r16
 498:	a8 01       	movw	r20, r16
 49a:	2c 81       	ldd	r18, Y+4	; 0x04
 49c:	0e 94 9c 00 	call	0x138	; 0x138 <_ZN6Nrf24l12transferSyncEPhS0_h>
    csnHi();                               // Pull up chip select
 4a0:	ce 01       	movw	r24, r28
 4a2:	0e 94 c1 00 	call	0x182	; 0x182 <_ZN6Nrf24l5csnHiEv>
    //  2) clear RX_DR IRQ, 3) read FIFO_STATUS to check if there are more 
    //  payloads available in RX FIFO, 4) if there are more data in RX FIFO,
    //  repeat from step 1)."
    // So if we're going to clear RX_DR here, we need to check the RX FIFO
    // in the dataReady() function
    configRegister(STATUS,(1<<RX_DR));   // Reset status register
 4a6:	ce 01       	movw	r24, r28
 4a8:	67 e0       	ldi	r22, 0x07	; 7
 4aa:	40 e4       	ldi	r20, 0x40	; 64
 4ac:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6Nrf24l14configRegisterEhh>
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <_ZN6Nrf24l9powerDownEv>:

void Nrf24l::csnLow(){
	PORTB &= ~_BV(SS);
}

void Nrf24l::powerDown(){
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	ec 01       	movw	r28, r24
	ceLow();
 4c0:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN6Nrf24l5ceLowEv>
	configRegister(CONFIG, mirf_CONFIG );
 4c4:	ce 01       	movw	r24, r28
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	48 e0       	ldi	r20, 0x08	; 8
 4ca:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN6Nrf24l14configRegisterEhh>
}
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <_ZN6Nrf24l7ledHighEv>:

void Nrf24l::ledHigh(){
	PORTD |= _BV(LED);
 4d4:	5a 9a       	sbi	0x0b, 2	; 11
}
 4d6:	08 95       	ret

000004d8 <_ZN6Nrf24l6ledLowEv>:

void Nrf24l::ledLow(){
	PORTD &= ~_BV(LED);
 4d8:	5a 98       	cbi	0x0b, 2	; 11
}
 4da:	08 95       	ret

000004dc <_ZN6Nrf24l5ledTgEv>:

void Nrf24l::ledTg(){
	PORTD ^= _BV(LED);
 4dc:	9b b1       	in	r25, 0x0b	; 11
 4de:	84 e0       	ldi	r24, 0x04	; 4
 4e0:	89 27       	eor	r24, r25
 4e2:	8b b9       	out	0x0b, r24	; 11
 4e4:	08 95       	ret

000004e6 <_Z10USART_Initj>:
#include <stdio.h>			// Conversions

void USART_Init( unsigned int ubrr)
{
/*Set baud rate */
UBRR0H = (unsigned char)(ubrr>>8);
 4e6:	90 93 c5 00 	sts	0x00C5, r25
UBRR0L = (unsigned char)ubrr;
 4ea:	80 93 c4 00 	sts	0x00C4, r24
//Enable receiver and transmitter */
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 4ee:	88 e1       	ldi	r24, 0x18	; 24
 4f0:	80 93 c1 00 	sts	0x00C1, r24
/* Set frame format: 8data, 2stop bit */
UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 4f4:	8e e0       	ldi	r24, 0x0E	; 14
 4f6:	80 93 c2 00 	sts	0x00C2, r24
}
 4fa:	08 95       	ret

000004fc <_Z14USART_Sendbyteh>:


void USART_Sendbyte( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) )
 4fc:	e0 ec       	ldi	r30, 0xC0	; 192
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	90 81       	ld	r25, Z
 502:	95 ff       	sbrs	r25, 5
 504:	fd cf       	rjmp	.-6      	; 0x500 <_Z14USART_Sendbyteh+0x4>
;
/* Put data into buffer, sends the data */
UDR0 = char(data);
 506:	80 93 c6 00 	sts	0x00C6, r24
}
 50a:	08 95       	ret

0000050c <_Z17USART_Send_stringPKc>:

void USART_Send_string(const char *str)
{
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	ec 01       	movw	r28, r24

	  while (*str) 
 512:	88 81       	ld	r24, Y
 514:	88 23       	and	r24, r24
 516:	31 f0       	breq	.+12     	; 0x524 <_Z17USART_Send_stringPKc+0x18>
;
/* Put data into buffer, sends the data */
UDR0 = char(data);
}

void USART_Send_string(const char *str)
 518:	21 96       	adiw	r28, 0x01	; 1
{

	  while (*str) 
      USART_Sendbyte(*str++);
 51a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_Z14USART_Sendbyteh>
}

void USART_Send_string(const char *str)
{

	  while (*str) 
 51e:	89 91       	ld	r24, Y+
 520:	88 23       	and	r24, r24
 522:	d9 f7       	brne	.-10     	; 0x51a <_Z17USART_Send_stringPKc+0xe>
      USART_Sendbyte(*str++);
	
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <_Z14USART_Send_intj>:

void USART_Send_int(unsigned int d )
{
 52a:	0f 93       	push	r16
 52c:	1f 93       	push	r17
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	2a 97       	sbiw	r28, 0x0a	; 10
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	sprintf(str,"%u",d);
 542:	00 d0       	rcall	.+0      	; 0x544 <_Z14USART_Send_intj+0x1a>
 544:	00 d0       	rcall	.+0      	; 0x546 <_Z14USART_Send_intj+0x1c>
 546:	00 d0       	rcall	.+0      	; 0x548 <_Z14USART_Send_intj+0x1e>
 548:	ed b7       	in	r30, 0x3d	; 61
 54a:	fe b7       	in	r31, 0x3e	; 62
 54c:	31 96       	adiw	r30, 0x01	; 1
 54e:	8e 01       	movw	r16, r28
 550:	0f 5f       	subi	r16, 0xFF	; 255
 552:	1f 4f       	sbci	r17, 0xFF	; 255
 554:	ad b7       	in	r26, 0x3d	; 61
 556:	be b7       	in	r27, 0x3e	; 62
 558:	12 96       	adiw	r26, 0x02	; 2
 55a:	1c 93       	st	X, r17
 55c:	0e 93       	st	-X, r16
 55e:	11 97       	sbiw	r26, 0x01	; 1
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	31 e0       	ldi	r19, 0x01	; 1
 564:	33 83       	std	Z+3, r19	; 0x03
 566:	22 83       	std	Z+2, r18	; 0x02
 568:	95 83       	std	Z+5, r25	; 0x05
 56a:	84 83       	std	Z+4, r24	; 0x04
 56c:	0e 94 02 04 	call	0x804	; 0x804 <sprintf>
	USART_Send_string(str);
 570:	8d b7       	in	r24, 0x3d	; 61
 572:	9e b7       	in	r25, 0x3e	; 62
 574:	06 96       	adiw	r24, 0x06	; 6
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	9e bf       	out	0x3e, r25	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	8d bf       	out	0x3d, r24	; 61
 580:	c8 01       	movw	r24, r16
 582:	0e 94 86 02 	call	0x50c	; 0x50c <_Z17USART_Send_stringPKc>
	
}
 586:	2a 96       	adiw	r28, 0x0a	; 10
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	08 95       	ret

0000059c <_Z13USART_Receivev>:


unsigned char USART_Receive( void )
{
/* Wait for data to be received */
while ( !(UCSR0A & (1<<RXC0)) )
 59c:	e0 ec       	ldi	r30, 0xC0	; 192
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	88 23       	and	r24, r24
 5a4:	ec f7       	brge	.-6      	; 0x5a0 <_Z13USART_Receivev+0x4>
;
/* Get and return received data from buffer */
return UDR0;
 5a6:	80 91 c6 00 	lds	r24, 0x00C6
 5aa:	08 95       	ret

000005ac <main>:
#include "usart.cpp"

Nrf24l nrf = Nrf24l();

int main(void)
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	00 d0       	rcall	.+0      	; 0x5b2 <main+0x6>
 5b2:	00 d0       	rcall	.+0      	; 0x5b4 <main+0x8>
 5b4:	0f 92       	push	r0
 5b6:	cd b7       	in	r28, 0x3d	; 61
 5b8:	de b7       	in	r29, 0x3e	; 62
	
	
	uint8_t data[nrf.payload];
 5ba:	80 91 14 01 	lds	r24, 0x0114
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	2d b7       	in	r18, 0x3d	; 61
 5c2:	3e b7       	in	r19, 0x3e	; 62
 5c4:	28 1b       	sub	r18, r24
 5c6:	39 0b       	sbc	r19, r25
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	3e bf       	out	0x3e, r19	; 62
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	2d bf       	out	0x3d, r18	; 61
 5d2:	0d b7       	in	r16, 0x3d	; 61
 5d4:	1e b7       	in	r17, 0x3e	; 62
 5d6:	0f 5f       	subi	r16, 0xFF	; 255
 5d8:	1f 4f       	sbci	r17, 0xFF	; 255
 5da:	1a 83       	std	Y+2, r17	; 0x02
 5dc:	09 83       	std	Y+1, r16	; 0x01
	uint8_t first_packets[nrf.payload];
 5de:	ed b7       	in	r30, 0x3d	; 61
 5e0:	fe b7       	in	r31, 0x3e	; 62
 5e2:	e8 1b       	sub	r30, r24
 5e4:	f9 0b       	sbc	r31, r25
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	fe bf       	out	0x3e, r31	; 62
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	ed bf       	out	0x3d, r30	; 61
 5f0:	8d b7       	in	r24, 0x3d	; 61
 5f2:	9e b7       	in	r25, 0x3e	; 62
 5f4:	01 96       	adiw	r24, 0x01	; 1
 5f6:	a8 2e       	mov	r10, r24
 5f8:	89 2e       	mov	r8, r25
	uint8_t aux,counter;
	
	USART_Init(MYUBRR);
 5fa:	87 e6       	ldi	r24, 0x67	; 103
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 73 02 	call	0x4e6	; 0x4e6 <_Z10USART_Initj>
		}
		_delay_ms(10);
	}*/
	
	
	nrf.init();
 602:	0f 2e       	mov	r0, r31
 604:	f0 e1       	ldi	r31, 0x10	; 16
 606:	ef 2e       	mov	r14, r31
 608:	f1 e0       	ldi	r31, 0x01	; 1
 60a:	ff 2e       	mov	r15, r31
 60c:	f0 2d       	mov	r31, r0
 60e:	c7 01       	movw	r24, r14
 610:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN6Nrf24l4initEv>
	
	USART_Send_int(aux);*/
	
	/* Espera o embarcado responder */
	
	nrf.setRADDR((uint8_t *)"canel");
 614:	c7 01       	movw	r24, r14
 616:	63 e0       	ldi	r22, 0x03	; 3
 618:	71 e0       	ldi	r23, 0x01	; 1
 61a:	0e 94 1f 01 	call	0x23e	; 0x23e <_ZN6Nrf24l8setRADDREPh>
	nrf.config();
 61e:	c7 01       	movw	r24, r14
 620:	0e 94 df 01 	call	0x3be	; 0x3be <_ZN6Nrf24l6configEv>
	
	nrf.ledHigh();
 624:	c7 01       	movw	r24, r14
 626:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN6Nrf24l7ledHighEv>
	//USART_Send_string("waiting\n");
	while(!nrf.dataReady());
 62a:	c7 01       	movw	r24, r14
 62c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Nrf24l9dataReadyEv>
 630:	88 23       	and	r24, r24
 632:	d9 f3       	breq	.-10     	; 0x62a <main+0x7e>
	//USART_Send_string("pacote recebido..\n");
	
	nrf.getData(first_packets);
 634:	80 e1       	ldi	r24, 0x10	; 16
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	6a 2d       	mov	r22, r10
 63a:	78 2d       	mov	r23, r8
 63c:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN6Nrf24l7getDataEPh>
	
	for(int i=0;i<nrf.payload;i++){
 640:	80 91 14 01 	lds	r24, 0x0114
 644:	88 23       	and	r24, r24
 646:	e9 f0       	breq	.+58     	; 0x682 <main+0xd6>
 648:	ca 2c       	mov	r12, r10
 64a:	d8 2c       	mov	r13, r8
 64c:	58 01       	movw	r10, r16
 64e:	ee 24       	eor	r14, r14
 650:	ff 24       	eor	r15, r15
 652:	0f 2e       	mov	r0, r31
 654:	f4 e1       	ldi	r31, 0x14	; 20
 656:	8f 2e       	mov	r8, r31
 658:	f1 e0       	ldi	r31, 0x01	; 1
 65a:	9f 2e       	mov	r9, r31
 65c:	f0 2d       	mov	r31, r0
		// Envia para a Serial o payload 
		USART_Send_int(first_packets[i]);
 65e:	f6 01       	movw	r30, r12
 660:	81 91       	ld	r24, Z+
 662:	6f 01       	movw	r12, r30
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 95 02 	call	0x52a	; 0x52a <_Z14USART_Send_intj>
		data[i] = 0;
 66a:	f5 01       	movw	r30, r10
 66c:	11 92       	st	Z+, r1
 66e:	5f 01       	movw	r10, r30
	while(!nrf.dataReady());
	//USART_Send_string("pacote recebido..\n");
	
	nrf.getData(first_packets);
	
	for(int i=0;i<nrf.payload;i++){
 670:	08 94       	sec
 672:	e1 1c       	adc	r14, r1
 674:	f1 1c       	adc	r15, r1
 676:	f4 01       	movw	r30, r8
 678:	80 81       	ld	r24, Z
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	e8 16       	cp	r14, r24
 67e:	f9 06       	cpc	r15, r25
 680:	74 f3       	brlt	.-36     	; 0x65e <main+0xb2>
		// Envia para a Serial o payload 
		USART_Send_int(first_packets[i]);
		data[i] = 0;
	}
	
	nrf.setTADDR((uint8_t *)"robot");
 682:	0f 2e       	mov	r0, r31
 684:	f0 e1       	ldi	r31, 0x10	; 16
 686:	ef 2e       	mov	r14, r31
 688:	f1 e0       	ldi	r31, 0x01	; 1
 68a:	ff 2e       	mov	r15, r31
 68c:	f0 2d       	mov	r31, r0
 68e:	c7 01       	movw	r24, r14
 690:	69 e0       	ldi	r22, 0x09	; 9
 692:	71 e0       	ldi	r23, 0x01	; 1
 694:	0e 94 09 01 	call	0x212	; 0x212 <_ZN6Nrf24l8setTADDREPh>
	
	//USART_Send_string("enviando..\n");
	nrf.send(data);
 698:	50 2e       	mov	r5, r16
 69a:	61 2e       	mov	r6, r17
 69c:	c7 01       	movw	r24, r14
 69e:	60 2f       	mov	r22, r16
 6a0:	71 2f       	mov	r23, r17
 6a2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_ZN6Nrf24l4sendEPh>
	
	while(nrf.isSending()); 
 6a6:	c7 01       	movw	r24, r14
 6a8:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN6Nrf24l9isSendingEv>
 6ac:	88 23       	and	r24, r24
 6ae:	d9 f7       	brne	.-10     	; 0x6a6 <main+0xfa>
	
	//USART_Send_string("enviado..\n");
	
	
	// espera o 000
	if(!nrf.dataReady()){ // Chegou um pacote
 6b0:	80 e1       	ldi	r24, 0x10	; 16
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Nrf24l9dataReadyEv>
 6b8:	88 23       	and	r24, r24
 6ba:	09 f5       	brne	.+66     	; 0x6fe <main+0x152>
	
	//USART_Send_string("recebido..\n");
	nrf.getData(data);
 6bc:	80 e1       	ldi	r24, 0x10	; 16
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	65 2d       	mov	r22, r5
 6c2:	76 2d       	mov	r23, r6
 6c4:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN6Nrf24l7getDataEPh>
	
	for(int i=0;i<nrf.payload;i++){
 6c8:	80 91 14 01 	lds	r24, 0x0114
 6cc:	88 23       	and	r24, r24
 6ce:	b9 f0       	breq	.+46     	; 0x6fe <main+0x152>
 6d0:	78 01       	movw	r14, r16
 6d2:	00 e0       	ldi	r16, 0x00	; 0
 6d4:	10 e0       	ldi	r17, 0x00	; 0
 6d6:	0f 2e       	mov	r0, r31
 6d8:	f4 e1       	ldi	r31, 0x14	; 20
 6da:	cf 2e       	mov	r12, r31
 6dc:	f1 e0       	ldi	r31, 0x01	; 1
 6de:	df 2e       	mov	r13, r31
 6e0:	f0 2d       	mov	r31, r0
		// Envia para a Serial o payload
		USART_Send_int(data[i]);
 6e2:	f7 01       	movw	r30, r14
 6e4:	81 91       	ld	r24, Z+
 6e6:	7f 01       	movw	r14, r30
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 95 02 	call	0x52a	; 0x52a <_Z14USART_Send_intj>
	if(!nrf.dataReady()){ // Chegou um pacote
	
	//USART_Send_string("recebido..\n");
	nrf.getData(data);
	
	for(int i=0;i<nrf.payload;i++){
 6ee:	0f 5f       	subi	r16, 0xFF	; 255
 6f0:	1f 4f       	sbci	r17, 0xFF	; 255
 6f2:	f6 01       	movw	r30, r12
 6f4:	80 81       	ld	r24, Z
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	08 17       	cp	r16, r24
 6fa:	19 07       	cpc	r17, r25
 6fc:	94 f3       	brlt	.-28     	; 0x6e2 <main+0x136>
	}		
	
	//USART_Send_string("enviei para serial\n");
	
	}	
	nrf.ledTg();
 6fe:	80 e1       	ldi	r24, 0x10	; 16
 700:	91 e0       	ldi	r25, 0x01	; 1
 702:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN6Nrf24l5ledTgEv>
	
	//USART_Send_string("\n");
	
	counter = 0;
 706:	ff 24       	eor	r15, r15
	
    while(1){
			
		if(nrf.dataReady()){ // Chegou um pacote
 708:	00 e1       	ldi	r16, 0x10	; 16
 70a:	11 e0       	ldi	r17, 0x01	; 1
			//for(int i=0;i<nrf.payload;i++){
			//	USART_Send_int(data[i]);
			//}
			//USART_Send_string("porco\n");
			
		}else if(((UCSR0A & (1<<RXC0)))){ // Chegou um byte na Serial
 70c:	0f 2e       	mov	r0, r31
 70e:	f0 ec       	ldi	r31, 0xC0	; 192
 710:	cf 2e       	mov	r12, r31
 712:	dd 24       	eor	r13, r13
 714:	f0 2d       	mov	r31, r0
			
			data[counter] = UDR0;
 716:	0f 2e       	mov	r0, r31
 718:	f6 ec       	ldi	r31, 0xC6	; 198
 71a:	2f 2e       	mov	r2, r31
 71c:	33 24       	eor	r3, r3
 71e:	f0 2d       	mov	r31, r0
			counter++;
			if(counter == nrf.payload){
 720:	0f 2e       	mov	r0, r31
 722:	f4 e1       	ldi	r31, 0x14	; 20
 724:	8f 2e       	mov	r8, r31
 726:	f1 e0       	ldi	r31, 0x01	; 1
 728:	9f 2e       	mov	r9, r31
 72a:	f0 2d       	mov	r31, r0
				
				//USART_Send_string("recebido na manolagem \n");
				
				nrf.getData(data);
				
				for(int i=0;i<nrf.payload;i++){
 72c:	98 01       	movw	r18, r16
 72e:	2c 5f       	subi	r18, 0xFC	; 252
 730:	3f 4f       	sbci	r19, 0xFF	; 255
 732:	3c 83       	std	Y+4, r19	; 0x04
 734:	2b 83       	std	Y+3, r18	; 0x03
					USART_Send_int(data[i]);
				}
				//USART_Send_string("\n\r");
				nrf.ledTg();
				counter = 0;
 736:	77 24       	eor	r7, r7
				
				//USART_Send_string("recebido na manolagem \n");
				
				nrf.getData(data);
				
				for(int i=0;i<nrf.payload;i++){
 738:	49 80       	ldd	r4, Y+1	; 0x01
 73a:	3a 81       	ldd	r19, Y+2	; 0x02
 73c:	3d 83       	std	Y+5, r19	; 0x05
	
	counter = 0;
	
    while(1){
			
		if(nrf.dataReady()){ // Chegou um pacote
 73e:	c8 01       	movw	r24, r16
 740:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Nrf24l9dataReadyEv>
 744:	88 23       	and	r24, r24
 746:	31 f0       	breq	.+12     	; 0x754 <main+0x1a8>
			
			nrf.getData(data);
 748:	c8 01       	movw	r24, r16
 74a:	65 2d       	mov	r22, r5
 74c:	76 2d       	mov	r23, r6
 74e:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN6Nrf24l7getDataEPh>
 752:	46 c0       	rjmp	.+140    	; 0x7e0 <main+0x234>
			//for(int i=0;i<nrf.payload;i++){
			//	USART_Send_int(data[i]);
			//}
			//USART_Send_string("porco\n");
			
		}else if(((UCSR0A & (1<<RXC0)))){ // Chegou um byte na Serial
 754:	f6 01       	movw	r30, r12
 756:	80 81       	ld	r24, Z
 758:	88 23       	and	r24, r24
 75a:	0c f0       	brlt	.+2      	; 0x75e <main+0x1b2>
 75c:	41 c0       	rjmp	.+130    	; 0x7e0 <main+0x234>
			
			data[counter] = UDR0;
 75e:	f1 01       	movw	r30, r2
 760:	80 81       	ld	r24, Z
 762:	e9 81       	ldd	r30, Y+1	; 0x01
 764:	fa 81       	ldd	r31, Y+2	; 0x02
 766:	ef 0d       	add	r30, r15
 768:	f1 1d       	adc	r31, r1
 76a:	80 83       	st	Z, r24
			counter++;
 76c:	f3 94       	inc	r15
			if(counter == nrf.payload){
 76e:	f4 01       	movw	r30, r8
 770:	80 81       	ld	r24, Z
 772:	8f 15       	cp	r24, r15
 774:	a9 f5       	brne	.+106    	; 0x7e0 <main+0x234>
				
				nrf.setTADDR((uint8_t *)"robot");
 776:	c8 01       	movw	r24, r16
 778:	69 e0       	ldi	r22, 0x09	; 9
 77a:	71 e0       	ldi	r23, 0x01	; 1
 77c:	0e 94 09 01 	call	0x212	; 0x212 <_ZN6Nrf24l8setTADDREPh>
				nrf.send(data);
 780:	c8 01       	movw	r24, r16
 782:	65 2d       	mov	r22, r5
 784:	76 2d       	mov	r23, r6
 786:	0e 94 fe 01 	call	0x3fc	; 0x3fc <_ZN6Nrf24l4sendEPh>
				
				//USART_Send_string("enviando..\n");
				
				while(nrf.isSending()); // espera enviar o pacote
 78a:	c8 01       	movw	r24, r16
 78c:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN6Nrf24l9isSendingEv>
 790:	88 23       	and	r24, r24
 792:	d9 f7       	brne	.-10     	; 0x78a <main+0x1de>
				
				//USART_Send_string("enviado... Esperando\n");
				
				while(!nrf.dataReady()); // espera a resposta
 794:	c8 01       	movw	r24, r16
 796:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN6Nrf24l9dataReadyEv>
 79a:	88 23       	and	r24, r24
 79c:	d9 f3       	breq	.-10     	; 0x794 <main+0x1e8>
				
				//USART_Send_string("recebido na manolagem \n");
				
				nrf.getData(data);
 79e:	c8 01       	movw	r24, r16
 7a0:	65 2d       	mov	r22, r5
 7a2:	76 2d       	mov	r23, r6
 7a4:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN6Nrf24l7getDataEPh>
				
				for(int i=0;i<nrf.payload;i++){
 7a8:	eb 81       	ldd	r30, Y+3	; 0x03
 7aa:	fc 81       	ldd	r31, Y+4	; 0x04
 7ac:	80 81       	ld	r24, Z
 7ae:	88 23       	and	r24, r24
 7b0:	99 f0       	breq	.+38     	; 0x7d8 <main+0x22c>
 7b2:	a4 2c       	mov	r10, r4
 7b4:	bd 80       	ldd	r11, Y+5	; 0x05
 7b6:	ee 24       	eor	r14, r14
 7b8:	ff 24       	eor	r15, r15
					USART_Send_int(data[i]);
 7ba:	f5 01       	movw	r30, r10
 7bc:	81 91       	ld	r24, Z+
 7be:	5f 01       	movw	r10, r30
 7c0:	97 2d       	mov	r25, r7
 7c2:	0e 94 95 02 	call	0x52a	; 0x52a <_Z14USART_Send_intj>
				
				//USART_Send_string("recebido na manolagem \n");
				
				nrf.getData(data);
				
				for(int i=0;i<nrf.payload;i++){
 7c6:	08 94       	sec
 7c8:	e1 1c       	adc	r14, r1
 7ca:	f1 1c       	adc	r15, r1
 7cc:	f4 01       	movw	r30, r8
 7ce:	80 81       	ld	r24, Z
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	e8 16       	cp	r14, r24
 7d4:	f9 06       	cpc	r15, r25
 7d6:	8c f3       	brlt	.-30     	; 0x7ba <main+0x20e>
					USART_Send_int(data[i]);
				}
				//USART_Send_string("\n\r");
				nrf.ledTg();
 7d8:	c8 01       	movw	r24, r16
 7da:	0e 94 6e 02 	call	0x4dc	; 0x4dc <_ZN6Nrf24l5ledTgEv>
				counter = 0;
 7de:	f7 2c       	mov	r15, r7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e0:	8f e3       	ldi	r24, 0x3F	; 63
 7e2:	9c e9       	ldi	r25, 0x9C	; 156
 7e4:	01 97       	sbiw	r24, 0x01	; 1
 7e6:	f1 f7       	brne	.-4      	; 0x7e4 <main+0x238>
 7e8:	00 c0       	rjmp	.+0      	; 0x7ea <main+0x23e>
 7ea:	00 00       	nop
 7ec:	a8 cf       	rjmp	.-176    	; 0x73e <main+0x192>

000007ee <_GLOBAL__sub_I_SPI>:
#include <util/delay.h>    // including the avr delay lib
#include <util/delay.h>		// Including the avr delay lib
#include "Mirf.cpp"
#include "usart.cpp"

Nrf24l nrf = Nrf24l();
 7ee:	80 e1       	ldi	r24, 0x10	; 16
 7f0:	91 e0       	ldi	r25, 0x01	; 1
 7f2:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN6Nrf24lC1Ev>
				counter = 0;
			}							
		}
		_delay_ms(10);
    }
 7f6:	08 95       	ret

000007f8 <__tablejump2__>:
 7f8:	ee 0f       	add	r30, r30
 7fa:	ff 1f       	adc	r31, r31

000007fc <__tablejump__>:
 7fc:	05 90       	lpm	r0, Z+
 7fe:	f4 91       	lpm	r31, Z
 800:	e0 2d       	mov	r30, r0
 802:	09 94       	ijmp

00000804 <sprintf>:
 804:	ae e0       	ldi	r26, 0x0E	; 14
 806:	b0 e0       	ldi	r27, 0x00	; 0
 808:	e8 e0       	ldi	r30, 0x08	; 8
 80a:	f4 e0       	ldi	r31, 0x04	; 4
 80c:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__prologue_saves__+0x1c>
 810:	0d 89       	ldd	r16, Y+21	; 0x15
 812:	1e 89       	ldd	r17, Y+22	; 0x16
 814:	86 e0       	ldi	r24, 0x06	; 6
 816:	8c 83       	std	Y+4, r24	; 0x04
 818:	1a 83       	std	Y+2, r17	; 0x02
 81a:	09 83       	std	Y+1, r16	; 0x01
 81c:	8f ef       	ldi	r24, 0xFF	; 255
 81e:	9f e7       	ldi	r25, 0x7F	; 127
 820:	9e 83       	std	Y+6, r25	; 0x06
 822:	8d 83       	std	Y+5, r24	; 0x05
 824:	ae 01       	movw	r20, r28
 826:	47 5e       	subi	r20, 0xE7	; 231
 828:	5f 4f       	sbci	r21, 0xFF	; 255
 82a:	ce 01       	movw	r24, r28
 82c:	01 96       	adiw	r24, 0x01	; 1
 82e:	6f 89       	ldd	r22, Y+23	; 0x17
 830:	78 8d       	ldd	r23, Y+24	; 0x18
 832:	0e 94 24 04 	call	0x848	; 0x848 <vfprintf>
 836:	ef 81       	ldd	r30, Y+7	; 0x07
 838:	f8 85       	ldd	r31, Y+8	; 0x08
 83a:	e0 0f       	add	r30, r16
 83c:	f1 1f       	adc	r31, r17
 83e:	10 82       	st	Z, r1
 840:	2e 96       	adiw	r28, 0x0e	; 14
 842:	e4 e0       	ldi	r30, 0x04	; 4
 844:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__epilogue_restores__+0x1c>

00000848 <vfprintf>:
 848:	ad e0       	ldi	r26, 0x0D	; 13
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	ea e2       	ldi	r30, 0x2A	; 42
 84e:	f4 e0       	ldi	r31, 0x04	; 4
 850:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__prologue_saves__>
 854:	3c 01       	movw	r6, r24
 856:	7d 87       	std	Y+13, r23	; 0x0d
 858:	6c 87       	std	Y+12, r22	; 0x0c
 85a:	5a 01       	movw	r10, r20
 85c:	fc 01       	movw	r30, r24
 85e:	17 82       	std	Z+7, r1	; 0x07
 860:	16 82       	std	Z+6, r1	; 0x06
 862:	83 81       	ldd	r24, Z+3	; 0x03
 864:	81 ff       	sbrs	r24, 1
 866:	c8 c1       	rjmp	.+912    	; 0xbf8 <__stack+0x2f9>
 868:	2e 01       	movw	r4, r28
 86a:	08 94       	sec
 86c:	41 1c       	adc	r4, r1
 86e:	51 1c       	adc	r5, r1
 870:	f3 01       	movw	r30, r6
 872:	93 81       	ldd	r25, Z+3	; 0x03
 874:	ec 85       	ldd	r30, Y+12	; 0x0c
 876:	fd 85       	ldd	r31, Y+13	; 0x0d
 878:	93 fd       	sbrc	r25, 3
 87a:	85 91       	lpm	r24, Z+
 87c:	93 ff       	sbrs	r25, 3
 87e:	81 91       	ld	r24, Z+
 880:	fd 87       	std	Y+13, r31	; 0x0d
 882:	ec 87       	std	Y+12, r30	; 0x0c
 884:	88 23       	and	r24, r24
 886:	09 f4       	brne	.+2      	; 0x88a <vfprintf+0x42>
 888:	b3 c1       	rjmp	.+870    	; 0xbf0 <__stack+0x2f1>
 88a:	85 32       	cpi	r24, 0x25	; 37
 88c:	41 f4       	brne	.+16     	; 0x89e <vfprintf+0x56>
 88e:	93 fd       	sbrc	r25, 3
 890:	85 91       	lpm	r24, Z+
 892:	93 ff       	sbrs	r25, 3
 894:	81 91       	ld	r24, Z+
 896:	fd 87       	std	Y+13, r31	; 0x0d
 898:	ec 87       	std	Y+12, r30	; 0x0c
 89a:	85 32       	cpi	r24, 0x25	; 37
 89c:	29 f4       	brne	.+10     	; 0x8a8 <vfprintf+0x60>
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	b3 01       	movw	r22, r6
 8a2:	0e 94 18 06 	call	0xc30	; 0xc30 <fputc>
 8a6:	e4 cf       	rjmp	.-56     	; 0x870 <vfprintf+0x28>
 8a8:	ff 24       	eor	r15, r15
 8aa:	ee 24       	eor	r14, r14
 8ac:	10 e0       	ldi	r17, 0x00	; 0
 8ae:	10 32       	cpi	r17, 0x20	; 32
 8b0:	b0 f4       	brcc	.+44     	; 0x8de <vfprintf+0x96>
 8b2:	8b 32       	cpi	r24, 0x2B	; 43
 8b4:	69 f0       	breq	.+26     	; 0x8d0 <vfprintf+0x88>
 8b6:	8c 32       	cpi	r24, 0x2C	; 44
 8b8:	28 f4       	brcc	.+10     	; 0x8c4 <vfprintf+0x7c>
 8ba:	80 32       	cpi	r24, 0x20	; 32
 8bc:	51 f0       	breq	.+20     	; 0x8d2 <vfprintf+0x8a>
 8be:	83 32       	cpi	r24, 0x23	; 35
 8c0:	71 f4       	brne	.+28     	; 0x8de <vfprintf+0x96>
 8c2:	0b c0       	rjmp	.+22     	; 0x8da <vfprintf+0x92>
 8c4:	8d 32       	cpi	r24, 0x2D	; 45
 8c6:	39 f0       	breq	.+14     	; 0x8d6 <vfprintf+0x8e>
 8c8:	80 33       	cpi	r24, 0x30	; 48
 8ca:	49 f4       	brne	.+18     	; 0x8de <vfprintf+0x96>
 8cc:	11 60       	ori	r17, 0x01	; 1
 8ce:	2c c0       	rjmp	.+88     	; 0x928 <__stack+0x29>
 8d0:	12 60       	ori	r17, 0x02	; 2
 8d2:	14 60       	ori	r17, 0x04	; 4
 8d4:	29 c0       	rjmp	.+82     	; 0x928 <__stack+0x29>
 8d6:	18 60       	ori	r17, 0x08	; 8
 8d8:	27 c0       	rjmp	.+78     	; 0x928 <__stack+0x29>
 8da:	10 61       	ori	r17, 0x10	; 16
 8dc:	25 c0       	rjmp	.+74     	; 0x928 <__stack+0x29>
 8de:	17 fd       	sbrc	r17, 7
 8e0:	2e c0       	rjmp	.+92     	; 0x93e <__stack+0x3f>
 8e2:	28 2f       	mov	r18, r24
 8e4:	20 53       	subi	r18, 0x30	; 48
 8e6:	2a 30       	cpi	r18, 0x0A	; 10
 8e8:	98 f4       	brcc	.+38     	; 0x910 <__stack+0x11>
 8ea:	16 ff       	sbrs	r17, 6
 8ec:	08 c0       	rjmp	.+16     	; 0x8fe <vfprintf+0xb6>
 8ee:	8f 2d       	mov	r24, r15
 8f0:	88 0f       	add	r24, r24
 8f2:	f8 2e       	mov	r15, r24
 8f4:	ff 0c       	add	r15, r15
 8f6:	ff 0c       	add	r15, r15
 8f8:	f8 0e       	add	r15, r24
 8fa:	f2 0e       	add	r15, r18
 8fc:	15 c0       	rjmp	.+42     	; 0x928 <__stack+0x29>
 8fe:	8e 2d       	mov	r24, r14
 900:	88 0f       	add	r24, r24
 902:	e8 2e       	mov	r14, r24
 904:	ee 0c       	add	r14, r14
 906:	ee 0c       	add	r14, r14
 908:	e8 0e       	add	r14, r24
 90a:	e2 0e       	add	r14, r18
 90c:	10 62       	ori	r17, 0x20	; 32
 90e:	0c c0       	rjmp	.+24     	; 0x928 <__stack+0x29>
 910:	8e 32       	cpi	r24, 0x2E	; 46
 912:	21 f4       	brne	.+8      	; 0x91c <__stack+0x1d>
 914:	16 fd       	sbrc	r17, 6
 916:	6c c1       	rjmp	.+728    	; 0xbf0 <__stack+0x2f1>
 918:	10 64       	ori	r17, 0x40	; 64
 91a:	06 c0       	rjmp	.+12     	; 0x928 <__stack+0x29>
 91c:	8c 36       	cpi	r24, 0x6C	; 108
 91e:	11 f4       	brne	.+4      	; 0x924 <__stack+0x25>
 920:	10 68       	ori	r17, 0x80	; 128
 922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0x29>
 924:	88 36       	cpi	r24, 0x68	; 104
 926:	59 f4       	brne	.+22     	; 0x93e <__stack+0x3f>
 928:	ec 85       	ldd	r30, Y+12	; 0x0c
 92a:	fd 85       	ldd	r31, Y+13	; 0x0d
 92c:	93 fd       	sbrc	r25, 3
 92e:	85 91       	lpm	r24, Z+
 930:	93 ff       	sbrs	r25, 3
 932:	81 91       	ld	r24, Z+
 934:	fd 87       	std	Y+13, r31	; 0x0d
 936:	ec 87       	std	Y+12, r30	; 0x0c
 938:	88 23       	and	r24, r24
 93a:	09 f0       	breq	.+2      	; 0x93e <__stack+0x3f>
 93c:	b8 cf       	rjmp	.-144    	; 0x8ae <vfprintf+0x66>
 93e:	98 2f       	mov	r25, r24
 940:	95 54       	subi	r25, 0x45	; 69
 942:	93 30       	cpi	r25, 0x03	; 3
 944:	18 f0       	brcs	.+6      	; 0x94c <__stack+0x4d>
 946:	90 52       	subi	r25, 0x20	; 32
 948:	93 30       	cpi	r25, 0x03	; 3
 94a:	38 f4       	brcc	.+14     	; 0x95a <__stack+0x5b>
 94c:	24 e0       	ldi	r18, 0x04	; 4
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	a2 0e       	add	r10, r18
 952:	b3 1e       	adc	r11, r19
 954:	3f e3       	ldi	r19, 0x3F	; 63
 956:	39 83       	std	Y+1, r19	; 0x01
 958:	0f c0       	rjmp	.+30     	; 0x978 <__stack+0x79>
 95a:	83 36       	cpi	r24, 0x63	; 99
 95c:	31 f0       	breq	.+12     	; 0x96a <__stack+0x6b>
 95e:	83 37       	cpi	r24, 0x73	; 115
 960:	81 f0       	breq	.+32     	; 0x982 <__stack+0x83>
 962:	83 35       	cpi	r24, 0x53	; 83
 964:	09 f0       	breq	.+2      	; 0x968 <__stack+0x69>
 966:	5a c0       	rjmp	.+180    	; 0xa1c <__stack+0x11d>
 968:	22 c0       	rjmp	.+68     	; 0x9ae <__stack+0xaf>
 96a:	f5 01       	movw	r30, r10
 96c:	80 81       	ld	r24, Z
 96e:	89 83       	std	Y+1, r24	; 0x01
 970:	22 e0       	ldi	r18, 0x02	; 2
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	a2 0e       	add	r10, r18
 976:	b3 1e       	adc	r11, r19
 978:	21 e0       	ldi	r18, 0x01	; 1
 97a:	c2 2e       	mov	r12, r18
 97c:	d1 2c       	mov	r13, r1
 97e:	42 01       	movw	r8, r4
 980:	14 c0       	rjmp	.+40     	; 0x9aa <__stack+0xab>
 982:	92 e0       	ldi	r25, 0x02	; 2
 984:	29 2e       	mov	r2, r25
 986:	31 2c       	mov	r3, r1
 988:	2a 0c       	add	r2, r10
 98a:	3b 1c       	adc	r3, r11
 98c:	f5 01       	movw	r30, r10
 98e:	80 80       	ld	r8, Z
 990:	91 80       	ldd	r9, Z+1	; 0x01
 992:	16 ff       	sbrs	r17, 6
 994:	03 c0       	rjmp	.+6      	; 0x99c <__stack+0x9d>
 996:	6f 2d       	mov	r22, r15
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__stack+0xa1>
 99c:	6f ef       	ldi	r22, 0xFF	; 255
 99e:	7f ef       	ldi	r23, 0xFF	; 255
 9a0:	c4 01       	movw	r24, r8
 9a2:	0e 94 0d 06 	call	0xc1a	; 0xc1a <strnlen>
 9a6:	6c 01       	movw	r12, r24
 9a8:	51 01       	movw	r10, r2
 9aa:	1f 77       	andi	r17, 0x7F	; 127
 9ac:	15 c0       	rjmp	.+42     	; 0x9d8 <__stack+0xd9>
 9ae:	82 e0       	ldi	r24, 0x02	; 2
 9b0:	28 2e       	mov	r2, r24
 9b2:	31 2c       	mov	r3, r1
 9b4:	2a 0c       	add	r2, r10
 9b6:	3b 1c       	adc	r3, r11
 9b8:	f5 01       	movw	r30, r10
 9ba:	80 80       	ld	r8, Z
 9bc:	91 80       	ldd	r9, Z+1	; 0x01
 9be:	16 ff       	sbrs	r17, 6
 9c0:	03 c0       	rjmp	.+6      	; 0x9c8 <__stack+0xc9>
 9c2:	6f 2d       	mov	r22, r15
 9c4:	70 e0       	ldi	r23, 0x00	; 0
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__stack+0xcd>
 9c8:	6f ef       	ldi	r22, 0xFF	; 255
 9ca:	7f ef       	ldi	r23, 0xFF	; 255
 9cc:	c4 01       	movw	r24, r8
 9ce:	0e 94 02 06 	call	0xc04	; 0xc04 <strnlen_P>
 9d2:	6c 01       	movw	r12, r24
 9d4:	10 68       	ori	r17, 0x80	; 128
 9d6:	51 01       	movw	r10, r2
 9d8:	13 fd       	sbrc	r17, 3
 9da:	1c c0       	rjmp	.+56     	; 0xa14 <__stack+0x115>
 9dc:	06 c0       	rjmp	.+12     	; 0x9ea <__stack+0xeb>
 9de:	80 e2       	ldi	r24, 0x20	; 32
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	b3 01       	movw	r22, r6
 9e4:	0e 94 18 06 	call	0xc30	; 0xc30 <fputc>
 9e8:	ea 94       	dec	r14
 9ea:	8e 2d       	mov	r24, r14
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	c8 16       	cp	r12, r24
 9f0:	d9 06       	cpc	r13, r25
 9f2:	a8 f3       	brcs	.-22     	; 0x9de <__stack+0xdf>
 9f4:	0f c0       	rjmp	.+30     	; 0xa14 <__stack+0x115>
 9f6:	f4 01       	movw	r30, r8
 9f8:	17 fd       	sbrc	r17, 7
 9fa:	85 91       	lpm	r24, Z+
 9fc:	17 ff       	sbrs	r17, 7
 9fe:	81 91       	ld	r24, Z+
 a00:	4f 01       	movw	r8, r30
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	b3 01       	movw	r22, r6
 a06:	0e 94 18 06 	call	0xc30	; 0xc30 <fputc>
 a0a:	e1 10       	cpse	r14, r1
 a0c:	ea 94       	dec	r14
 a0e:	08 94       	sec
 a10:	c1 08       	sbc	r12, r1
 a12:	d1 08       	sbc	r13, r1
 a14:	c1 14       	cp	r12, r1
 a16:	d1 04       	cpc	r13, r1
 a18:	71 f7       	brne	.-36     	; 0x9f6 <__stack+0xf7>
 a1a:	e7 c0       	rjmp	.+462    	; 0xbea <__stack+0x2eb>
 a1c:	84 36       	cpi	r24, 0x64	; 100
 a1e:	11 f0       	breq	.+4      	; 0xa24 <__stack+0x125>
 a20:	89 36       	cpi	r24, 0x69	; 105
 a22:	51 f5       	brne	.+84     	; 0xa78 <__stack+0x179>
 a24:	f5 01       	movw	r30, r10
 a26:	17 ff       	sbrs	r17, 7
 a28:	07 c0       	rjmp	.+14     	; 0xa38 <__stack+0x139>
 a2a:	80 81       	ld	r24, Z
 a2c:	91 81       	ldd	r25, Z+1	; 0x01
 a2e:	a2 81       	ldd	r26, Z+2	; 0x02
 a30:	b3 81       	ldd	r27, Z+3	; 0x03
 a32:	24 e0       	ldi	r18, 0x04	; 4
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	08 c0       	rjmp	.+16     	; 0xa48 <__stack+0x149>
 a38:	80 81       	ld	r24, Z
 a3a:	91 81       	ldd	r25, Z+1	; 0x01
 a3c:	aa 27       	eor	r26, r26
 a3e:	97 fd       	sbrc	r25, 7
 a40:	a0 95       	com	r26
 a42:	ba 2f       	mov	r27, r26
 a44:	22 e0       	ldi	r18, 0x02	; 2
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	a2 0e       	add	r10, r18
 a4a:	b3 1e       	adc	r11, r19
 a4c:	01 2f       	mov	r16, r17
 a4e:	0f 76       	andi	r16, 0x6F	; 111
 a50:	b7 ff       	sbrs	r27, 7
 a52:	08 c0       	rjmp	.+16     	; 0xa64 <__stack+0x165>
 a54:	b0 95       	com	r27
 a56:	a0 95       	com	r26
 a58:	90 95       	com	r25
 a5a:	81 95       	neg	r24
 a5c:	9f 4f       	sbci	r25, 0xFF	; 255
 a5e:	af 4f       	sbci	r26, 0xFF	; 255
 a60:	bf 4f       	sbci	r27, 0xFF	; 255
 a62:	00 68       	ori	r16, 0x80	; 128
 a64:	bc 01       	movw	r22, r24
 a66:	cd 01       	movw	r24, r26
 a68:	a2 01       	movw	r20, r4
 a6a:	2a e0       	ldi	r18, 0x0A	; 10
 a6c:	30 e0       	ldi	r19, 0x00	; 0
 a6e:	0e 94 44 06 	call	0xc88	; 0xc88 <__ultoa_invert>
 a72:	d8 2e       	mov	r13, r24
 a74:	d4 18       	sub	r13, r4
 a76:	3f c0       	rjmp	.+126    	; 0xaf6 <__stack+0x1f7>
 a78:	85 37       	cpi	r24, 0x75	; 117
 a7a:	21 f4       	brne	.+8      	; 0xa84 <__stack+0x185>
 a7c:	1f 7e       	andi	r17, 0xEF	; 239
 a7e:	2a e0       	ldi	r18, 0x0A	; 10
 a80:	30 e0       	ldi	r19, 0x00	; 0
 a82:	20 c0       	rjmp	.+64     	; 0xac4 <__stack+0x1c5>
 a84:	19 7f       	andi	r17, 0xF9	; 249
 a86:	8f 36       	cpi	r24, 0x6F	; 111
 a88:	a9 f0       	breq	.+42     	; 0xab4 <__stack+0x1b5>
 a8a:	80 37       	cpi	r24, 0x70	; 112
 a8c:	20 f4       	brcc	.+8      	; 0xa96 <__stack+0x197>
 a8e:	88 35       	cpi	r24, 0x58	; 88
 a90:	09 f0       	breq	.+2      	; 0xa94 <__stack+0x195>
 a92:	ae c0       	rjmp	.+348    	; 0xbf0 <__stack+0x2f1>
 a94:	0b c0       	rjmp	.+22     	; 0xaac <__stack+0x1ad>
 a96:	80 37       	cpi	r24, 0x70	; 112
 a98:	21 f0       	breq	.+8      	; 0xaa2 <__stack+0x1a3>
 a9a:	88 37       	cpi	r24, 0x78	; 120
 a9c:	09 f0       	breq	.+2      	; 0xaa0 <__stack+0x1a1>
 a9e:	a8 c0       	rjmp	.+336    	; 0xbf0 <__stack+0x2f1>
 aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <__stack+0x1a5>
 aa2:	10 61       	ori	r17, 0x10	; 16
 aa4:	14 ff       	sbrs	r17, 4
 aa6:	09 c0       	rjmp	.+18     	; 0xaba <__stack+0x1bb>
 aa8:	14 60       	ori	r17, 0x04	; 4
 aaa:	07 c0       	rjmp	.+14     	; 0xaba <__stack+0x1bb>
 aac:	14 ff       	sbrs	r17, 4
 aae:	08 c0       	rjmp	.+16     	; 0xac0 <__stack+0x1c1>
 ab0:	16 60       	ori	r17, 0x06	; 6
 ab2:	06 c0       	rjmp	.+12     	; 0xac0 <__stack+0x1c1>
 ab4:	28 e0       	ldi	r18, 0x08	; 8
 ab6:	30 e0       	ldi	r19, 0x00	; 0
 ab8:	05 c0       	rjmp	.+10     	; 0xac4 <__stack+0x1c5>
 aba:	20 e1       	ldi	r18, 0x10	; 16
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <__stack+0x1c5>
 ac0:	20 e1       	ldi	r18, 0x10	; 16
 ac2:	32 e0       	ldi	r19, 0x02	; 2
 ac4:	f5 01       	movw	r30, r10
 ac6:	17 ff       	sbrs	r17, 7
 ac8:	07 c0       	rjmp	.+14     	; 0xad8 <__stack+0x1d9>
 aca:	60 81       	ld	r22, Z
 acc:	71 81       	ldd	r23, Z+1	; 0x01
 ace:	82 81       	ldd	r24, Z+2	; 0x02
 ad0:	93 81       	ldd	r25, Z+3	; 0x03
 ad2:	44 e0       	ldi	r20, 0x04	; 4
 ad4:	50 e0       	ldi	r21, 0x00	; 0
 ad6:	06 c0       	rjmp	.+12     	; 0xae4 <__stack+0x1e5>
 ad8:	60 81       	ld	r22, Z
 ada:	71 81       	ldd	r23, Z+1	; 0x01
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	42 e0       	ldi	r20, 0x02	; 2
 ae2:	50 e0       	ldi	r21, 0x00	; 0
 ae4:	a4 0e       	add	r10, r20
 ae6:	b5 1e       	adc	r11, r21
 ae8:	a2 01       	movw	r20, r4
 aea:	0e 94 44 06 	call	0xc88	; 0xc88 <__ultoa_invert>
 aee:	d8 2e       	mov	r13, r24
 af0:	d4 18       	sub	r13, r4
 af2:	01 2f       	mov	r16, r17
 af4:	0f 77       	andi	r16, 0x7F	; 127
 af6:	06 ff       	sbrs	r16, 6
 af8:	09 c0       	rjmp	.+18     	; 0xb0c <__stack+0x20d>
 afa:	0e 7f       	andi	r16, 0xFE	; 254
 afc:	df 14       	cp	r13, r15
 afe:	30 f4       	brcc	.+12     	; 0xb0c <__stack+0x20d>
 b00:	04 ff       	sbrs	r16, 4
 b02:	06 c0       	rjmp	.+12     	; 0xb10 <__stack+0x211>
 b04:	02 fd       	sbrc	r16, 2
 b06:	04 c0       	rjmp	.+8      	; 0xb10 <__stack+0x211>
 b08:	0f 7e       	andi	r16, 0xEF	; 239
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <__stack+0x211>
 b0c:	1d 2d       	mov	r17, r13
 b0e:	01 c0       	rjmp	.+2      	; 0xb12 <__stack+0x213>
 b10:	1f 2d       	mov	r17, r15
 b12:	80 2f       	mov	r24, r16
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	04 ff       	sbrs	r16, 4
 b18:	0c c0       	rjmp	.+24     	; 0xb32 <__stack+0x233>
 b1a:	fe 01       	movw	r30, r28
 b1c:	ed 0d       	add	r30, r13
 b1e:	f1 1d       	adc	r31, r1
 b20:	20 81       	ld	r18, Z
 b22:	20 33       	cpi	r18, 0x30	; 48
 b24:	11 f4       	brne	.+4      	; 0xb2a <__stack+0x22b>
 b26:	09 7e       	andi	r16, 0xE9	; 233
 b28:	09 c0       	rjmp	.+18     	; 0xb3c <__stack+0x23d>
 b2a:	02 ff       	sbrs	r16, 2
 b2c:	06 c0       	rjmp	.+12     	; 0xb3a <__stack+0x23b>
 b2e:	1e 5f       	subi	r17, 0xFE	; 254
 b30:	05 c0       	rjmp	.+10     	; 0xb3c <__stack+0x23d>
 b32:	86 78       	andi	r24, 0x86	; 134
 b34:	90 70       	andi	r25, 0x00	; 0
 b36:	00 97       	sbiw	r24, 0x00	; 0
 b38:	09 f0       	breq	.+2      	; 0xb3c <__stack+0x23d>
 b3a:	1f 5f       	subi	r17, 0xFF	; 255
 b3c:	80 2e       	mov	r8, r16
 b3e:	99 24       	eor	r9, r9
 b40:	03 fd       	sbrc	r16, 3
 b42:	12 c0       	rjmp	.+36     	; 0xb68 <__stack+0x269>
 b44:	00 ff       	sbrs	r16, 0
 b46:	0d c0       	rjmp	.+26     	; 0xb62 <__stack+0x263>
 b48:	fd 2c       	mov	r15, r13
 b4a:	1e 15       	cp	r17, r14
 b4c:	50 f4       	brcc	.+20     	; 0xb62 <__stack+0x263>
 b4e:	fe 0c       	add	r15, r14
 b50:	f1 1a       	sub	r15, r17
 b52:	1e 2d       	mov	r17, r14
 b54:	06 c0       	rjmp	.+12     	; 0xb62 <__stack+0x263>
 b56:	80 e2       	ldi	r24, 0x20	; 32
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	b3 01       	movw	r22, r6
 b5c:	0e 94 18 06 	call	0xc30	; 0xc30 <fputc>
 b60:	1f 5f       	subi	r17, 0xFF	; 255
 b62:	1e 15       	cp	r17, r14
 b64:	c0 f3       	brcs	.-16     	; 0xb56 <__stack+0x257>
 b66:	04 c0       	rjmp	.+8      	; 0xb70 <__stack+0x271>
 b68:	1e 15       	cp	r17, r14
 b6a:	10 f4       	brcc	.+4      	; 0xb70 <__stack+0x271>
 b6c:	e1 1a       	sub	r14, r17
 b6e:	01 c0       	rjmp	.+2      	; 0xb72 <__stack+0x273>
 b70:	ee 24       	eor	r14, r14
 b72:	84 fe       	sbrs	r8, 4
 b74:	0f c0       	rjmp	.+30     	; 0xb94 <__stack+0x295>
 b76:	80 e3       	ldi	r24, 0x30	; 48
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	b3 01       	movw	r22, r6
 b7c:	0e 94 18 06 	call	0xc30	; 0xc30 <fputc>
 b80:	82 fe       	sbrs	r8, 2
 b82:	1f c0       	rjmp	.+62     	; 0xbc2 <__stack+0x2c3>
 b84:	81 fe       	sbrs	r8, 1
 b86:	03 c0       	rjmp	.+6      	; 0xb8e <__stack+0x28f>
 b88:	88 e5       	ldi	r24, 0x58	; 88
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	10 c0       	rjmp	.+32     	; 0xbae <__stack+0x2af>
 b8e:	88 e7       	ldi	r24, 0x78	; 120
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	0d c0       	rjmp	.+26     	; 0xbae <__stack+0x2af>
 b94:	c4 01       	movw	r24, r8
 b96:	86 78       	andi	r24, 0x86	; 134
 b98:	90 70       	andi	r25, 0x00	; 0
 b9a:	00 97       	sbiw	r24, 0x00	; 0
 b9c:	91 f0       	breq	.+36     	; 0xbc2 <__stack+0x2c3>
 b9e:	81 fc       	sbrc	r8, 1
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <__stack+0x2a7>
 ba2:	80 e2       	ldi	r24, 0x20	; 32
 ba4:	01 c0       	rjmp	.+2      	; 0xba8 <__stack+0x2a9>
 ba6:	8b e2       	ldi	r24, 0x2B	; 43
 ba8:	07 fd       	sbrc	r16, 7
 baa:	8d e2       	ldi	r24, 0x2D	; 45
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	b3 01       	movw	r22, r6
 bb0:	0e 94 18 06 	call	0xc30	; 0xc30 <fputc>
 bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <__stack+0x2c3>
 bb6:	80 e3       	ldi	r24, 0x30	; 48
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	b3 01       	movw	r22, r6
 bbc:	0e 94 18 06 	call	0xc30	; 0xc30 <fputc>
 bc0:	fa 94       	dec	r15
 bc2:	df 14       	cp	r13, r15
 bc4:	c0 f3       	brcs	.-16     	; 0xbb6 <__stack+0x2b7>
 bc6:	da 94       	dec	r13
 bc8:	f2 01       	movw	r30, r4
 bca:	ed 0d       	add	r30, r13
 bcc:	f1 1d       	adc	r31, r1
 bce:	80 81       	ld	r24, Z
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	b3 01       	movw	r22, r6
 bd4:	0e 94 18 06 	call	0xc30	; 0xc30 <fputc>
 bd8:	dd 20       	and	r13, r13
 bda:	a9 f7       	brne	.-22     	; 0xbc6 <__stack+0x2c7>
 bdc:	06 c0       	rjmp	.+12     	; 0xbea <__stack+0x2eb>
 bde:	80 e2       	ldi	r24, 0x20	; 32
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	b3 01       	movw	r22, r6
 be4:	0e 94 18 06 	call	0xc30	; 0xc30 <fputc>
 be8:	ea 94       	dec	r14
 bea:	ee 20       	and	r14, r14
 bec:	c1 f7       	brne	.-16     	; 0xbde <__stack+0x2df>
 bee:	40 ce       	rjmp	.-896    	; 0x870 <vfprintf+0x28>
 bf0:	f3 01       	movw	r30, r6
 bf2:	86 81       	ldd	r24, Z+6	; 0x06
 bf4:	97 81       	ldd	r25, Z+7	; 0x07
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <__stack+0x2fd>
 bf8:	8f ef       	ldi	r24, 0xFF	; 255
 bfa:	9f ef       	ldi	r25, 0xFF	; 255
 bfc:	2d 96       	adiw	r28, 0x0d	; 13
 bfe:	e2 e1       	ldi	r30, 0x12	; 18
 c00:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__epilogue_restores__>

00000c04 <strnlen_P>:
 c04:	fc 01       	movw	r30, r24
 c06:	05 90       	lpm	r0, Z+
 c08:	61 50       	subi	r22, 0x01	; 1
 c0a:	70 40       	sbci	r23, 0x00	; 0
 c0c:	01 10       	cpse	r0, r1
 c0e:	d8 f7       	brcc	.-10     	; 0xc06 <strnlen_P+0x2>
 c10:	80 95       	com	r24
 c12:	90 95       	com	r25
 c14:	8e 0f       	add	r24, r30
 c16:	9f 1f       	adc	r25, r31
 c18:	08 95       	ret

00000c1a <strnlen>:
 c1a:	fc 01       	movw	r30, r24
 c1c:	61 50       	subi	r22, 0x01	; 1
 c1e:	70 40       	sbci	r23, 0x00	; 0
 c20:	01 90       	ld	r0, Z+
 c22:	01 10       	cpse	r0, r1
 c24:	d8 f7       	brcc	.-10     	; 0xc1c <strnlen+0x2>
 c26:	80 95       	com	r24
 c28:	90 95       	com	r25
 c2a:	8e 0f       	add	r24, r30
 c2c:	9f 1f       	adc	r25, r31
 c2e:	08 95       	ret

00000c30 <fputc>:
 c30:	0f 93       	push	r16
 c32:	1f 93       	push	r17
 c34:	cf 93       	push	r28
 c36:	df 93       	push	r29
 c38:	8c 01       	movw	r16, r24
 c3a:	eb 01       	movw	r28, r22
 c3c:	8b 81       	ldd	r24, Y+3	; 0x03
 c3e:	81 ff       	sbrs	r24, 1
 c40:	1b c0       	rjmp	.+54     	; 0xc78 <fputc+0x48>
 c42:	82 ff       	sbrs	r24, 2
 c44:	0d c0       	rjmp	.+26     	; 0xc60 <fputc+0x30>
 c46:	2e 81       	ldd	r18, Y+6	; 0x06
 c48:	3f 81       	ldd	r19, Y+7	; 0x07
 c4a:	8c 81       	ldd	r24, Y+4	; 0x04
 c4c:	9d 81       	ldd	r25, Y+5	; 0x05
 c4e:	28 17       	cp	r18, r24
 c50:	39 07       	cpc	r19, r25
 c52:	64 f4       	brge	.+24     	; 0xc6c <fputc+0x3c>
 c54:	e8 81       	ld	r30, Y
 c56:	f9 81       	ldd	r31, Y+1	; 0x01
 c58:	01 93       	st	Z+, r16
 c5a:	f9 83       	std	Y+1, r31	; 0x01
 c5c:	e8 83       	st	Y, r30
 c5e:	06 c0       	rjmp	.+12     	; 0xc6c <fputc+0x3c>
 c60:	e8 85       	ldd	r30, Y+8	; 0x08
 c62:	f9 85       	ldd	r31, Y+9	; 0x09
 c64:	80 2f       	mov	r24, r16
 c66:	09 95       	icall
 c68:	00 97       	sbiw	r24, 0x00	; 0
 c6a:	31 f4       	brne	.+12     	; 0xc78 <fputc+0x48>
 c6c:	8e 81       	ldd	r24, Y+6	; 0x06
 c6e:	9f 81       	ldd	r25, Y+7	; 0x07
 c70:	01 96       	adiw	r24, 0x01	; 1
 c72:	9f 83       	std	Y+7, r25	; 0x07
 c74:	8e 83       	std	Y+6, r24	; 0x06
 c76:	02 c0       	rjmp	.+4      	; 0xc7c <fputc+0x4c>
 c78:	0f ef       	ldi	r16, 0xFF	; 255
 c7a:	1f ef       	ldi	r17, 0xFF	; 255
 c7c:	c8 01       	movw	r24, r16
 c7e:	df 91       	pop	r29
 c80:	cf 91       	pop	r28
 c82:	1f 91       	pop	r17
 c84:	0f 91       	pop	r16
 c86:	08 95       	ret

00000c88 <__ultoa_invert>:
 c88:	fa 01       	movw	r30, r20
 c8a:	aa 27       	eor	r26, r26
 c8c:	28 30       	cpi	r18, 0x08	; 8
 c8e:	51 f1       	breq	.+84     	; 0xce4 <__ultoa_invert+0x5c>
 c90:	20 31       	cpi	r18, 0x10	; 16
 c92:	81 f1       	breq	.+96     	; 0xcf4 <__ultoa_invert+0x6c>
 c94:	e8 94       	clt
 c96:	6f 93       	push	r22
 c98:	6e 7f       	andi	r22, 0xFE	; 254
 c9a:	6e 5f       	subi	r22, 0xFE	; 254
 c9c:	7f 4f       	sbci	r23, 0xFF	; 255
 c9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ca0:	9f 4f       	sbci	r25, 0xFF	; 255
 ca2:	af 4f       	sbci	r26, 0xFF	; 255
 ca4:	b1 e0       	ldi	r27, 0x01	; 1
 ca6:	3e d0       	rcall	.+124    	; 0xd24 <__ultoa_invert+0x9c>
 ca8:	b4 e0       	ldi	r27, 0x04	; 4
 caa:	3c d0       	rcall	.+120    	; 0xd24 <__ultoa_invert+0x9c>
 cac:	67 0f       	add	r22, r23
 cae:	78 1f       	adc	r23, r24
 cb0:	89 1f       	adc	r24, r25
 cb2:	9a 1f       	adc	r25, r26
 cb4:	a1 1d       	adc	r26, r1
 cb6:	68 0f       	add	r22, r24
 cb8:	79 1f       	adc	r23, r25
 cba:	8a 1f       	adc	r24, r26
 cbc:	91 1d       	adc	r25, r1
 cbe:	a1 1d       	adc	r26, r1
 cc0:	6a 0f       	add	r22, r26
 cc2:	71 1d       	adc	r23, r1
 cc4:	81 1d       	adc	r24, r1
 cc6:	91 1d       	adc	r25, r1
 cc8:	a1 1d       	adc	r26, r1
 cca:	20 d0       	rcall	.+64     	; 0xd0c <__ultoa_invert+0x84>
 ccc:	09 f4       	brne	.+2      	; 0xcd0 <__ultoa_invert+0x48>
 cce:	68 94       	set
 cd0:	3f 91       	pop	r19
 cd2:	2a e0       	ldi	r18, 0x0A	; 10
 cd4:	26 9f       	mul	r18, r22
 cd6:	11 24       	eor	r1, r1
 cd8:	30 19       	sub	r19, r0
 cda:	30 5d       	subi	r19, 0xD0	; 208
 cdc:	31 93       	st	Z+, r19
 cde:	de f6       	brtc	.-74     	; 0xc96 <__ultoa_invert+0xe>
 ce0:	cf 01       	movw	r24, r30
 ce2:	08 95       	ret
 ce4:	46 2f       	mov	r20, r22
 ce6:	47 70       	andi	r20, 0x07	; 7
 ce8:	40 5d       	subi	r20, 0xD0	; 208
 cea:	41 93       	st	Z+, r20
 cec:	b3 e0       	ldi	r27, 0x03	; 3
 cee:	0f d0       	rcall	.+30     	; 0xd0e <__ultoa_invert+0x86>
 cf0:	c9 f7       	brne	.-14     	; 0xce4 <__ultoa_invert+0x5c>
 cf2:	f6 cf       	rjmp	.-20     	; 0xce0 <__ultoa_invert+0x58>
 cf4:	46 2f       	mov	r20, r22
 cf6:	4f 70       	andi	r20, 0x0F	; 15
 cf8:	40 5d       	subi	r20, 0xD0	; 208
 cfa:	4a 33       	cpi	r20, 0x3A	; 58
 cfc:	18 f0       	brcs	.+6      	; 0xd04 <__ultoa_invert+0x7c>
 cfe:	49 5d       	subi	r20, 0xD9	; 217
 d00:	31 fd       	sbrc	r19, 1
 d02:	40 52       	subi	r20, 0x20	; 32
 d04:	41 93       	st	Z+, r20
 d06:	02 d0       	rcall	.+4      	; 0xd0c <__ultoa_invert+0x84>
 d08:	a9 f7       	brne	.-22     	; 0xcf4 <__ultoa_invert+0x6c>
 d0a:	ea cf       	rjmp	.-44     	; 0xce0 <__ultoa_invert+0x58>
 d0c:	b4 e0       	ldi	r27, 0x04	; 4
 d0e:	a6 95       	lsr	r26
 d10:	97 95       	ror	r25
 d12:	87 95       	ror	r24
 d14:	77 95       	ror	r23
 d16:	67 95       	ror	r22
 d18:	ba 95       	dec	r27
 d1a:	c9 f7       	brne	.-14     	; 0xd0e <__ultoa_invert+0x86>
 d1c:	00 97       	sbiw	r24, 0x00	; 0
 d1e:	61 05       	cpc	r22, r1
 d20:	71 05       	cpc	r23, r1
 d22:	08 95       	ret
 d24:	9b 01       	movw	r18, r22
 d26:	ac 01       	movw	r20, r24
 d28:	0a 2e       	mov	r0, r26
 d2a:	06 94       	lsr	r0
 d2c:	57 95       	ror	r21
 d2e:	47 95       	ror	r20
 d30:	37 95       	ror	r19
 d32:	27 95       	ror	r18
 d34:	ba 95       	dec	r27
 d36:	c9 f7       	brne	.-14     	; 0xd2a <__ultoa_invert+0xa2>
 d38:	62 0f       	add	r22, r18
 d3a:	73 1f       	adc	r23, r19
 d3c:	84 1f       	adc	r24, r20
 d3e:	95 1f       	adc	r25, r21
 d40:	a0 1d       	adc	r26, r0
 d42:	08 95       	ret

00000d44 <__prologue_saves__>:
 d44:	2f 92       	push	r2
 d46:	3f 92       	push	r3
 d48:	4f 92       	push	r4
 d4a:	5f 92       	push	r5
 d4c:	6f 92       	push	r6
 d4e:	7f 92       	push	r7
 d50:	8f 92       	push	r8
 d52:	9f 92       	push	r9
 d54:	af 92       	push	r10
 d56:	bf 92       	push	r11
 d58:	cf 92       	push	r12
 d5a:	df 92       	push	r13
 d5c:	ef 92       	push	r14
 d5e:	ff 92       	push	r15
 d60:	0f 93       	push	r16
 d62:	1f 93       	push	r17
 d64:	cf 93       	push	r28
 d66:	df 93       	push	r29
 d68:	cd b7       	in	r28, 0x3d	; 61
 d6a:	de b7       	in	r29, 0x3e	; 62
 d6c:	ca 1b       	sub	r28, r26
 d6e:	db 0b       	sbc	r29, r27
 d70:	0f b6       	in	r0, 0x3f	; 63
 d72:	f8 94       	cli
 d74:	de bf       	out	0x3e, r29	; 62
 d76:	0f be       	out	0x3f, r0	; 63
 d78:	cd bf       	out	0x3d, r28	; 61
 d7a:	09 94       	ijmp

00000d7c <__epilogue_restores__>:
 d7c:	2a 88       	ldd	r2, Y+18	; 0x12
 d7e:	39 88       	ldd	r3, Y+17	; 0x11
 d80:	48 88       	ldd	r4, Y+16	; 0x10
 d82:	5f 84       	ldd	r5, Y+15	; 0x0f
 d84:	6e 84       	ldd	r6, Y+14	; 0x0e
 d86:	7d 84       	ldd	r7, Y+13	; 0x0d
 d88:	8c 84       	ldd	r8, Y+12	; 0x0c
 d8a:	9b 84       	ldd	r9, Y+11	; 0x0b
 d8c:	aa 84       	ldd	r10, Y+10	; 0x0a
 d8e:	b9 84       	ldd	r11, Y+9	; 0x09
 d90:	c8 84       	ldd	r12, Y+8	; 0x08
 d92:	df 80       	ldd	r13, Y+7	; 0x07
 d94:	ee 80       	ldd	r14, Y+6	; 0x06
 d96:	fd 80       	ldd	r15, Y+5	; 0x05
 d98:	0c 81       	ldd	r16, Y+4	; 0x04
 d9a:	1b 81       	ldd	r17, Y+3	; 0x03
 d9c:	aa 81       	ldd	r26, Y+2	; 0x02
 d9e:	b9 81       	ldd	r27, Y+1	; 0x01
 da0:	ce 0f       	add	r28, r30
 da2:	d1 1d       	adc	r29, r1
 da4:	0f b6       	in	r0, 0x3f	; 63
 da6:	f8 94       	cli
 da8:	de bf       	out	0x3e, r29	; 62
 daa:	0f be       	out	0x3f, r0	; 63
 dac:	cd bf       	out	0x3d, r28	; 61
 dae:	ed 01       	movw	r28, r26
 db0:	08 95       	ret

00000db2 <_exit>:
 db2:	f8 94       	cli

00000db4 <__stop_program>:
 db4:	ff cf       	rjmp	.-2      	; 0xdb4 <__stop_program>
